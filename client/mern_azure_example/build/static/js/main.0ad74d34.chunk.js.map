{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","createThought","thought","prompt","axios","post","then","res","setState","thoughts","state","data","newThought","catch","err","alert","JSON","stringify","deleteThoughts","window","confirm","delete","seedThoughts","get","this","className","onClick","map","thoughtModel","style","listStyleType","margin","borderBottom","_id","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRA6EeA,E,kDAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqCRC,cAAgB,WACd,IAAMC,EAAUC,OAAO,wBAClBD,GACLE,IACGC,KAAK,uBAAwB,CAAEH,YAC/BI,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAS,GAAD,mBAAM,EAAKC,MAAMD,UAAjB,CAA2BF,EAAII,KAAKC,kBACxEC,OAAM,SAAAC,GAAG,OAAIC,MAAM,6BAAD,OAA8BC,KAAKC,UAAUH,SA5CjD,EA+CnBI,eAAiB,WACEC,OAAOC,QAAQ,yBAEhChB,IACGiB,OAAO,kBACPf,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAU,QACtCI,OAAM,SAAAC,GAAG,OAAIC,MAAM,kCAAD,OAAmCC,KAAKC,UAAUH,SArDtD,EAwDnBQ,aAAe,WACEH,OAAOC,QAAQ,qCAE9BhB,IACGC,KAAK,qBAAsB,IAC3BC,MAAK,WACJF,IACGmB,IAAI,kBACJjB,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAUF,EAAII,UAC1CE,MAAME,UAEVF,MAAME,QAjET,EAAKL,MAAQ,CACXD,SAAU,IAHK,E,gEAOE,IAAD,OAClBL,IACGmB,IAAI,kBACJjB,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAUF,EAAII,UAC1CE,MAAME,S,+BAGD,IACAN,EAAae,KAAKd,MAAlBD,SAER,OACE,sBAAKgB,UAAU,MAAf,UAEE,wBAAQC,QAASF,KAAKvB,cAAtB,4BACA,wBAAQyB,QAASF,KAAKN,eAAtB,6BACA,wBAAQQ,QAASF,KAAKF,aAAtB,2BAEA,6BACGb,EAASkB,KAAI,SAAAC,GAAY,OACxB,oBACEC,MAAO,CAAEC,cAAe,OAAQC,OAAQ,OAAQC,aAAc,mBADhE,SAIGJ,EAAa1B,SAFT0B,EAAaK,iB,GA7BdC,aCOEC,QACa,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDuHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.0ad74d34.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      thoughts: [],\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/thoughts/')\n      .then(res => this.setState({ thoughts: res.data }))\n      .catch(alert);\n  }\n\n  render() {\n    const { thoughts } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* Buttons to interact with API */}\n        <button onClick={this.createThought}>Create Thought</button>\n        <button onClick={this.deleteThoughts}>Delete Thoughts</button>\n        <button onClick={this.seedThoughts}>Seed Thoughts</button>\n        {/* List of thoughts in Cosmos DB */}\n        <ul>\n          {thoughts.map(thoughtModel => (\n            <li\n              style={{ listStyleType: 'none', margin: '20px', borderBottom: '1px solid black' }}\n              key={thoughtModel._id}\n            >\n              {thoughtModel.thought}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  createThought = () => {\n    const thought = prompt('Enter your thought: ');\n    if (!thought) return;\n    axios\n      .post('/api/thoughts/create', { thought })\n      .then(res => this.setState({ thoughts: [...this.state.thoughts, res.data.newThought] }))\n      .catch(err => alert(`Failed to create thought\\n${JSON.stringify(err)}`));\n  };\n\n  deleteThoughts = () => {\n    const doDelete = window.confirm('Delete all Thoughts?');\n    if (!doDelete) return;\n    axios\n      .delete('/api/thoughts/')\n      .then(res => this.setState({ thoughts: [] }))\n      .catch(err => alert(`Failed to delete all thoughts\\n${JSON.stringify(err)}`));\n  };\n\n  seedThoughts = () => {\n    const doSeed = window.confirm('Do you want to seed random data?');\n    if (!doSeed) return;\n    axios\n      .post('/api/thoughts/seed', {})\n      .then(() => {\n        axios\n          .get('/api/thoughts/')\n          .then(res => this.setState({ thoughts: res.data }))\n          .catch(alert);\n      })\n      .catch(alert);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}